=begin
#Square Connect API

OpenAPI spec version: 2.0
Contact: developers@squareup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SquareConnect
  # Defines how prices are modified or set for items that match the pricing rule during the active time period.
  class CatalogPricingRule
    # User-defined name for the pricing rule. For example, \"Buy one get one free\" or \"10% off\".
    attr_accessor :name

    # Unique ID for the [CatalogTimePeriod](#type-catalogtimeperiod)s when this pricing rule is in effect. If left unset, the pricing rule is always in effect.
    attr_accessor :time_period_ids

    # Unique ID for the [CatalogDiscount](#type-catalogdiscount) to take off the price of all matched items.  Only one of `total_price_money`, `item_price`, or `discount` can be supplied.
    attr_accessor :discount_id

    # Unique ID for the [CatalogProductSet](#type-catalogproductset) that will be matched by this rule. A match rule matches within the entire cart.
    attr_accessor :match_products_id

    # The [CatalogProductSet](#type-catalogproductset) to apply the pricing rule to within the set of matched products specified by `match_products_id`. An apply rule can only match once within the set of matched products. If left unset, the pricing rule will be applied to all products within the set of matched products.
    attr_accessor :apply_products_id

    # Identifies the [CatalogProductSet](#type-catalogproductset) to exclude from this pricing rule. An exclude rule matches within the subset of the cart that fits the match rules (the match set). An exclude rule can only match once in the match set. If not supplied, the pricing will be applied to all products in the match set. Other products retain their base price, or a price generated by other rules.
    attr_accessor :exclude_products_id

    # Represents the date the Pricing Rule is valid from. Represented in RFC3339 full-date format (YYYY-MM-DD).
    attr_accessor :valid_from_date

    # Represents the local time the pricing rule should be valid from. Time zone is determined by the device running the Point of Sale app.  Represented in RFC3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
    attr_accessor :valid_from_local_time

    # Represents the date the pricing rule will become inactive.  Represented in RFC3339 full-date format (YYYY-MM-DD).
    attr_accessor :valid_until_date

    # Represents the local time at which the pricing rule will become inactive. Time zone is determined by the device running the Point of Sale app.  Represented in RFC3339 partial-time format (HH:MM:SS). Partial seconds will be truncated.
    attr_accessor :valid_until_local_time


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'time_period_ids' => :'time_period_ids',
        :'discount_id' => :'discount_id',
        :'match_products_id' => :'match_products_id',
        :'apply_products_id' => :'apply_products_id',
        :'exclude_products_id' => :'exclude_products_id',
        :'valid_from_date' => :'valid_from_date',
        :'valid_from_local_time' => :'valid_from_local_time',
        :'valid_until_date' => :'valid_until_date',
        :'valid_until_local_time' => :'valid_until_local_time'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'time_period_ids' => :'Array<String>',
        :'discount_id' => :'String',
        :'match_products_id' => :'String',
        :'apply_products_id' => :'String',
        :'exclude_products_id' => :'String',
        :'valid_from_date' => :'String',
        :'valid_from_local_time' => :'String',
        :'valid_until_date' => :'String',
        :'valid_until_local_time' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'time_period_ids')
        if (value = attributes[:'time_period_ids']).is_a?(Array)
          self.time_period_ids = value
        end
      end

      if attributes.has_key?(:'discount_id')
        self.discount_id = attributes[:'discount_id']
      end

      if attributes.has_key?(:'match_products_id')
        self.match_products_id = attributes[:'match_products_id']
      end

      if attributes.has_key?(:'apply_products_id')
        self.apply_products_id = attributes[:'apply_products_id']
      end

      if attributes.has_key?(:'exclude_products_id')
        self.exclude_products_id = attributes[:'exclude_products_id']
      end

      if attributes.has_key?(:'valid_from_date')
        self.valid_from_date = attributes[:'valid_from_date']
      end

      if attributes.has_key?(:'valid_from_local_time')
        self.valid_from_local_time = attributes[:'valid_from_local_time']
      end

      if attributes.has_key?(:'valid_until_date')
        self.valid_until_date = attributes[:'valid_until_date']
      end

      if attributes.has_key?(:'valid_until_local_time')
        self.valid_until_local_time = attributes[:'valid_until_local_time']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          time_period_ids == o.time_period_ids &&
          discount_id == o.discount_id &&
          match_products_id == o.match_products_id &&
          apply_products_id == o.apply_products_id &&
          exclude_products_id == o.exclude_products_id &&
          valid_from_date == o.valid_from_date &&
          valid_from_local_time == o.valid_from_local_time &&
          valid_until_date == o.valid_until_date &&
          valid_until_local_time == o.valid_until_local_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, time_period_ids, discount_id, match_products_id, apply_products_id, exclude_products_id, valid_from_date, valid_from_local_time, valid_until_date, valid_until_local_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SquareConnect.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
