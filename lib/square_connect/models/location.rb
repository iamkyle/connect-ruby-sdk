=begin
#Square Connect API

OpenAPI spec version: 2.0
Contact: developers@squareup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SquareConnect
  # Represents one of a business's locations.
  class Location
    # The location's unique ID.
    attr_accessor :id

    # The location's name. Location names are set by the account owner and displayed in the dashboard as the location's nickname
    attr_accessor :name

    # The location's physical address.
    attr_accessor :address

    # The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location's timezone.
    attr_accessor :timezone

    # Indicates which Square features are enabled for the location. See [LocationCapability](#type-locationcapability) for possible values
    attr_accessor :capabilities

    # The location's status See [LocationStatus](#type-locationstatus) for possible values
    attr_accessor :status

    # The time when the location was created, in RFC 3339 format.
    attr_accessor :created_at

    # The identifier of the merchant that owns the location.
    attr_accessor :merchant_id

    # The location's country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values
    attr_accessor :country

    # The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
    attr_accessor :language_code

    # The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'. See [Currency](#type-currency) for possible values
    attr_accessor :currency

    # The location's phone_number.
    attr_accessor :phone_number

    # The location's business_name which is shown to its customers. For example, this is the name printed on its customer's receipts.
    attr_accessor :business_name

    # The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space. See [LocationType](#type-locationtype) for possible values
    attr_accessor :type

    # The location's website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set.
    attr_accessor :website_url

    #   The hours of operation for a business location.  Default: none; only exists if explicitly set.
    attr_accessor :business_hours

    # The email of the location.
    attr_accessor :business_email

    # The business description of the location.
    attr_accessor :description

    # The Twitter username of the location without the '
    attr_accessor :twitter_username

    # The Instagram username of the location without the '
    attr_accessor :instagram_username

    # The Facebook profile URL of the location. The URL should begin with 'facebook.com/'.
    attr_accessor :facebook_url

    # The physical coordinates (latitude and longitude) of the location.
    attr_accessor :coordinates


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'address' => :'address',
        :'timezone' => :'timezone',
        :'capabilities' => :'capabilities',
        :'status' => :'status',
        :'created_at' => :'created_at',
        :'merchant_id' => :'merchant_id',
        :'country' => :'country',
        :'language_code' => :'language_code',
        :'currency' => :'currency',
        :'phone_number' => :'phone_number',
        :'business_name' => :'business_name',
        :'type' => :'type',
        :'website_url' => :'website_url',
        :'business_hours' => :'business_hours',
        :'business_email' => :'business_email',
        :'description' => :'description',
        :'twitter_username' => :'twitter_username',
        :'instagram_username' => :'instagram_username',
        :'facebook_url' => :'facebook_url',
        :'coordinates' => :'coordinates'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'address' => :'Address',
        :'timezone' => :'String',
        :'capabilities' => :'Array<String>',
        :'status' => :'String',
        :'created_at' => :'String',
        :'merchant_id' => :'String',
        :'country' => :'String',
        :'language_code' => :'String',
        :'currency' => :'String',
        :'phone_number' => :'String',
        :'business_name' => :'String',
        :'type' => :'String',
        :'website_url' => :'String',
        :'business_hours' => :'BusinessHours',
        :'business_email' => :'String',
        :'description' => :'String',
        :'twitter_username' => :'String',
        :'instagram_username' => :'String',
        :'facebook_url' => :'String',
        :'coordinates' => :'Coordinates'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.has_key?(:'capabilities')
        if (value = attributes[:'capabilities']).is_a?(Array)
          self.capabilities = value
        end
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'language_code')
        self.language_code = attributes[:'language_code']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.has_key?(:'business_name')
        self.business_name = attributes[:'business_name']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'website_url')
        self.website_url = attributes[:'website_url']
      end

      if attributes.has_key?(:'business_hours')
        self.business_hours = attributes[:'business_hours']
      end

      if attributes.has_key?(:'business_email')
        self.business_email = attributes[:'business_email']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'twitter_username')
        self.twitter_username = attributes[:'twitter_username']
      end

      if attributes.has_key?(:'instagram_username')
        self.instagram_username = attributes[:'instagram_username']
      end

      if attributes.has_key?(:'facebook_url')
        self.facebook_url = attributes[:'facebook_url']
      end

      if attributes.has_key?(:'coordinates')
        self.coordinates = attributes[:'coordinates']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          address == o.address &&
          timezone == o.timezone &&
          capabilities == o.capabilities &&
          status == o.status &&
          created_at == o.created_at &&
          merchant_id == o.merchant_id &&
          country == o.country &&
          language_code == o.language_code &&
          currency == o.currency &&
          phone_number == o.phone_number &&
          business_name == o.business_name &&
          type == o.type &&
          website_url == o.website_url &&
          business_hours == o.business_hours &&
          business_email == o.business_email &&
          description == o.description &&
          twitter_username == o.twitter_username &&
          instagram_username == o.instagram_username &&
          facebook_url == o.facebook_url &&
          coordinates == o.coordinates
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, address, timezone, capabilities, status, created_at, merchant_id, country, language_code, currency, phone_number, business_name, type, website_url, business_hours, business_email, description, twitter_username, instagram_username, facebook_url, coordinates].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SquareConnect.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
