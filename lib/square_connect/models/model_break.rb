=begin
#Square Connect API

OpenAPI spec version: 2.0
Contact: developers@squareup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SquareConnect
  # A record of an employee's break during a shift.
  class ModelBreak
    # UUID for this object
    attr_accessor :id

    # RFC 3339; follows same timezone info as `Shift`. Precision up to the minute is respected; seconds are truncated.
    attr_accessor :start_at

    # RFC 3339; follows same timezone info as `Shift`. Precision up to the minute is respected; seconds are truncated. The `end_at` minute is not counted when the break length is calculated. For example, a break from `00:00` to `00:11`  is considered a 10 minute break (midnight to 10 minutes after midnight).
    attr_accessor :end_at

    # The `BreakType` this `Break` was templated on.
    attr_accessor :break_type_id

    # A human-readable name.
    attr_accessor :name

    # Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of the break.
    attr_accessor :expected_duration

    # Whether this break counts towards time worked for compensation purposes.
    attr_accessor :is_paid


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'start_at' => :'start_at',
        :'end_at' => :'end_at',
        :'break_type_id' => :'break_type_id',
        :'name' => :'name',
        :'expected_duration' => :'expected_duration',
        :'is_paid' => :'is_paid'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'start_at' => :'String',
        :'end_at' => :'String',
        :'break_type_id' => :'String',
        :'name' => :'String',
        :'expected_duration' => :'String',
        :'is_paid' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'start_at')
        self.start_at = attributes[:'start_at']
      end

      if attributes.has_key?(:'end_at')
        self.end_at = attributes[:'end_at']
      end

      if attributes.has_key?(:'break_type_id')
        self.break_type_id = attributes[:'break_type_id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'expected_duration')
        self.expected_duration = attributes[:'expected_duration']
      end

      if attributes.has_key?(:'is_paid')
        self.is_paid = attributes[:'is_paid']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @start_at.nil?
        invalid_properties.push("invalid value for 'start_at', start_at cannot be nil.")
      end

      if @start_at.to_s.length < 1
        invalid_properties.push("invalid value for 'start_at', the character length must be great than or equal to 1.")
      end

      if @break_type_id.nil?
        invalid_properties.push("invalid value for 'break_type_id', break_type_id cannot be nil.")
      end

      if @break_type_id.to_s.length < 1
        invalid_properties.push("invalid value for 'break_type_id', the character length must be great than or equal to 1.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @name.to_s.length < 1
        invalid_properties.push("invalid value for 'name', the character length must be great than or equal to 1.")
      end

      if @expected_duration.nil?
        invalid_properties.push("invalid value for 'expected_duration', expected_duration cannot be nil.")
      end

      if @expected_duration.to_s.length < 1
        invalid_properties.push("invalid value for 'expected_duration', the character length must be great than or equal to 1.")
      end

      if @is_paid.nil?
        invalid_properties.push("invalid value for 'is_paid', is_paid cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @start_at.nil?
      return false if @start_at.to_s.length < 1
      return false if @break_type_id.nil?
      return false if @break_type_id.to_s.length < 1
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if @expected_duration.nil?
      return false if @expected_duration.to_s.length < 1
      return false if @is_paid.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] start_at Value to be assigned
    def start_at=(start_at)
      if start_at.nil?
        fail ArgumentError, "start_at cannot be nil"
      end

      if start_at.to_s.length < 1
        fail ArgumentError, "invalid value for 'start_at', the character length must be great than or equal to 1."
      end

      @start_at = start_at
    end

    # Custom attribute writer method with validation
    # @param [Object] break_type_id Value to be assigned
    def break_type_id=(break_type_id)
      if break_type_id.nil?
        fail ArgumentError, "break_type_id cannot be nil"
      end

      if break_type_id.to_s.length < 1
        fail ArgumentError, "invalid value for 'break_type_id', the character length must be great than or equal to 1."
      end

      @break_type_id = break_type_id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, "name cannot be nil"
      end

      if name.to_s.length < 1
        fail ArgumentError, "invalid value for 'name', the character length must be great than or equal to 1."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] expected_duration Value to be assigned
    def expected_duration=(expected_duration)
      if expected_duration.nil?
        fail ArgumentError, "expected_duration cannot be nil"
      end

      if expected_duration.to_s.length < 1
        fail ArgumentError, "invalid value for 'expected_duration', the character length must be great than or equal to 1."
      end

      @expected_duration = expected_duration
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          start_at == o.start_at &&
          end_at == o.end_at &&
          break_type_id == o.break_type_id &&
          name == o.name &&
          expected_duration == o.expected_duration &&
          is_paid == o.is_paid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, start_at, end_at, break_type_id, name, expected_duration, is_paid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SquareConnect.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
