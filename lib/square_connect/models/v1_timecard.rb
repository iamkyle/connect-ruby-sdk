=begin
#Square Connect API

OpenAPI spec version: 2.0
Contact: developers@squareup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SquareConnect
  # Represents a timecard for an employee.
  class V1Timecard
    # The timecard's unique ID.
    attr_accessor :id

    # The ID of the employee the timecard is associated with.
    attr_accessor :employee_id

    # If true, the timecard was deleted by the merchant, and it is no longer valid.
    attr_accessor :deleted

    # The clock-in time for the timecard, in ISO 8601 format.
    attr_accessor :clockin_time

    # The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
    attr_accessor :clockout_time

    # The ID of the location the employee clocked in from. We strongly reccomend providing a clockin_location_id. Square uses the clockin_location_id to determine a timecardâ€™s timezone and overtime rules.
    attr_accessor :clockin_location_id

    # The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
    attr_accessor :clockout_location_id

    # The time when the timecard was created, in ISO 8601 format.
    attr_accessor :created_at

    # The time when the timecard was most recently updated, in ISO 8601 format.
    attr_accessor :updated_at

    # The total number of regular (non-overtime) seconds worked in the timecard.
    attr_accessor :regular_seconds_worked

    # The total number of overtime seconds worked in the timecard.
    attr_accessor :overtime_seconds_worked

    # The total number of doubletime seconds worked in the timecard.
    attr_accessor :doubletime_seconds_worked


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'employee_id' => :'employee_id',
        :'deleted' => :'deleted',
        :'clockin_time' => :'clockin_time',
        :'clockout_time' => :'clockout_time',
        :'clockin_location_id' => :'clockin_location_id',
        :'clockout_location_id' => :'clockout_location_id',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'regular_seconds_worked' => :'regular_seconds_worked',
        :'overtime_seconds_worked' => :'overtime_seconds_worked',
        :'doubletime_seconds_worked' => :'doubletime_seconds_worked'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'employee_id' => :'String',
        :'deleted' => :'BOOLEAN',
        :'clockin_time' => :'String',
        :'clockout_time' => :'String',
        :'clockin_location_id' => :'String',
        :'clockout_location_id' => :'String',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'regular_seconds_worked' => :'Float',
        :'overtime_seconds_worked' => :'Float',
        :'doubletime_seconds_worked' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'employee_id')
        self.employee_id = attributes[:'employee_id']
      end

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.has_key?(:'clockin_time')
        self.clockin_time = attributes[:'clockin_time']
      end

      if attributes.has_key?(:'clockout_time')
        self.clockout_time = attributes[:'clockout_time']
      end

      if attributes.has_key?(:'clockin_location_id')
        self.clockin_location_id = attributes[:'clockin_location_id']
      end

      if attributes.has_key?(:'clockout_location_id')
        self.clockout_location_id = attributes[:'clockout_location_id']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'regular_seconds_worked')
        self.regular_seconds_worked = attributes[:'regular_seconds_worked']
      end

      if attributes.has_key?(:'overtime_seconds_worked')
        self.overtime_seconds_worked = attributes[:'overtime_seconds_worked']
      end

      if attributes.has_key?(:'doubletime_seconds_worked')
        self.doubletime_seconds_worked = attributes[:'doubletime_seconds_worked']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @employee_id.nil?
        invalid_properties.push("invalid value for 'employee_id', employee_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @employee_id.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          employee_id == o.employee_id &&
          deleted == o.deleted &&
          clockin_time == o.clockin_time &&
          clockout_time == o.clockout_time &&
          clockin_location_id == o.clockin_location_id &&
          clockout_location_id == o.clockout_location_id &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          regular_seconds_worked == o.regular_seconds_worked &&
          overtime_seconds_worked == o.overtime_seconds_worked &&
          doubletime_seconds_worked == o.doubletime_seconds_worked
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, employee_id, deleted, clockin_time, clockout_time, clockin_location_id, clockout_location_id, created_at, updated_at, regular_seconds_worked, overtime_seconds_worked, doubletime_seconds_worked].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SquareConnect.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
