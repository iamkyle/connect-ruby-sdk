=begin
#Square Connect API

OpenAPI spec version: 2.0
Contact: developers@squareup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SquareConnect
  # Represents a unit of measurement to use with a quantity, such as ounces or inches. Exactly one of the following fields are required: `custom_unit`, `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.  The `family` field describes the type of measurement. For example, ounces are in the weight family.
  class MeasurementUnit
    # A custom unit of measurement defined by the seller using the Point of Sale app or ad-hoc as an order line item.
    attr_accessor :custom_unit

    # Represents a standard area unit. See [MeasurementUnitArea](#type-measurementunitarea) for possible values
    attr_accessor :area_unit

    # Represents a standard length unit. See [MeasurementUnitLength](#type-measurementunitlength) for possible values
    attr_accessor :length_unit

    # Represents a standard volume unit. See [MeasurementUnitVolume](#type-measurementunitvolume) for possible values
    attr_accessor :volume_unit

    # Represents a standard unit of weight or mass. See [MeasurementUnitWeight](#type-measurementunitweight) for possible values
    attr_accessor :weight_unit

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'custom_unit' => :'custom_unit',
        :'area_unit' => :'area_unit',
        :'length_unit' => :'length_unit',
        :'volume_unit' => :'volume_unit',
        :'weight_unit' => :'weight_unit'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'custom_unit' => :'MeasurementUnitCustom',
        :'area_unit' => :'String',
        :'length_unit' => :'String',
        :'volume_unit' => :'String',
        :'weight_unit' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'custom_unit')
        self.custom_unit = attributes[:'custom_unit']
      end

      if attributes.has_key?(:'area_unit')
        self.area_unit = attributes[:'area_unit']
      end

      if attributes.has_key?(:'length_unit')
        self.length_unit = attributes[:'length_unit']
      end

      if attributes.has_key?(:'volume_unit')
        self.volume_unit = attributes[:'volume_unit']
      end

      if attributes.has_key?(:'weight_unit')
        self.weight_unit = attributes[:'weight_unit']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      area_unit_validator = EnumAttributeValidator.new('String', ["IMPERIAL_ACRE", "IMPERIAL_SQUARE_INCH", "IMPERIAL_SQUARE_FOOT", "IMPERIAL_SQUARE_YARD", "IMPERIAL_SQUARE_MILE", "METRIC_SQUARE_CENTIMETER", "METRIC_SQUARE_METER", "METRIC_SQUARE_KILOMETER"])
      return false unless area_unit_validator.valid?(@area_unit)
      length_unit_validator = EnumAttributeValidator.new('String', ["IMPERIAL_INCH", "IMPERIAL_FOOT", "IMPERIAL_YARD", "IMPERIAL_MILE", "METRIC_MILLIMETER", "METRIC_CENTIMETER", "METRIC_METER", "METRIC_KILOMETER"])
      return false unless length_unit_validator.valid?(@length_unit)
      volume_unit_validator = EnumAttributeValidator.new('String', ["GENERIC_FLUID_OUNCE", "GENERIC_SHOT", "GENERIC_CUP", "GENERIC_PINT", "GENERIC_QUART", "GENERIC_GALLON", "IMPERIAL_CUBIC_INCH", "IMPERIAL_CUBIC_FOOT", "IMPERIAL_CUBIC_YARD", "METRIC_MILLILITER", "METRIC_LITER"])
      return false unless volume_unit_validator.valid?(@volume_unit)
      weight_unit_validator = EnumAttributeValidator.new('String', ["IMPERIAL_WEIGHT_OUNCE", "IMPERIAL_POUND", "IMPERIAL_STONE", "METRIC_MILLIGRAM", "METRIC_GRAM", "METRIC_KILOGRAM"])
      return false unless weight_unit_validator.valid?(@weight_unit)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] area_unit Object to be assigned
    def area_unit=(area_unit)
      validator = EnumAttributeValidator.new('String', ["IMPERIAL_ACRE", "IMPERIAL_SQUARE_INCH", "IMPERIAL_SQUARE_FOOT", "IMPERIAL_SQUARE_YARD", "IMPERIAL_SQUARE_MILE", "METRIC_SQUARE_CENTIMETER", "METRIC_SQUARE_METER", "METRIC_SQUARE_KILOMETER"])
      unless validator.valid?(area_unit)
        fail ArgumentError, "invalid value for 'area_unit', must be one of #{validator.allowable_values}."
      end
      @area_unit = area_unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] length_unit Object to be assigned
    def length_unit=(length_unit)
      validator = EnumAttributeValidator.new('String', ["IMPERIAL_INCH", "IMPERIAL_FOOT", "IMPERIAL_YARD", "IMPERIAL_MILE", "METRIC_MILLIMETER", "METRIC_CENTIMETER", "METRIC_METER", "METRIC_KILOMETER"])
      unless validator.valid?(length_unit)
        fail ArgumentError, "invalid value for 'length_unit', must be one of #{validator.allowable_values}."
      end
      @length_unit = length_unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] volume_unit Object to be assigned
    def volume_unit=(volume_unit)
      validator = EnumAttributeValidator.new('String', ["GENERIC_FLUID_OUNCE", "GENERIC_SHOT", "GENERIC_CUP", "GENERIC_PINT", "GENERIC_QUART", "GENERIC_GALLON", "IMPERIAL_CUBIC_INCH", "IMPERIAL_CUBIC_FOOT", "IMPERIAL_CUBIC_YARD", "METRIC_MILLILITER", "METRIC_LITER"])
      unless validator.valid?(volume_unit)
        fail ArgumentError, "invalid value for 'volume_unit', must be one of #{validator.allowable_values}."
      end
      @volume_unit = volume_unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weight_unit Object to be assigned
    def weight_unit=(weight_unit)
      validator = EnumAttributeValidator.new('String', ["IMPERIAL_WEIGHT_OUNCE", "IMPERIAL_POUND", "IMPERIAL_STONE", "METRIC_MILLIGRAM", "METRIC_GRAM", "METRIC_KILOGRAM"])
      unless validator.valid?(weight_unit)
        fail ArgumentError, "invalid value for 'weight_unit', must be one of #{validator.allowable_values}."
      end
      @weight_unit = weight_unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          custom_unit == o.custom_unit &&
          area_unit == o.area_unit &&
          length_unit == o.length_unit &&
          volume_unit == o.volume_unit &&
          weight_unit == o.weight_unit
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [custom_unit, area_unit, length_unit, volume_unit, weight_unit].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SquareConnect.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
